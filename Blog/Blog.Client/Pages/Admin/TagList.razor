@* @page "/admin/tags" *@

@* @attribute [Authorize] *@
@* @rendermode InteractiveServer *@
@rendermode InteractiveWebAssembly
@using Data.Models
@using Data.Models.Interfaces
@using SharedComponents
@using SharedComponents.ReusableComponents
@inject IBlogApi _api

<div class="col-xxl-4 col-lg-6 col-md-8 mx-auto">
    <h3>Tags</h3>

    <EditForm OnValidSubmit="Save" Model="Item">
        <DataAnnotationsValidator />
        <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
        
        <BlogInputText @bind-Value="@Item.Name" Label="Name" />
        
        <BlogButton Type="BlogButton.ButtonType.Save">Save</BlogButton>
    </EditForm>

    <ItemList Items="Items" DeleteEvent="@Delete" SelectEvent="@Select" ItemType="Tag">
        <ItemTemplate>
            @{
                var item = context as Tag;
                if (item is not null)
                {
                    @item.Name
                }
            }
        </ItemTemplate>
    </ItemList>
</div>

@code {
    private List<Tag> Items { get; set; } = [];
    public Tag Item { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        Items = (await _api.GetTagsAsync()) ?? [];
        await base.OnInitializedAsync();
    }

    private async Task Delete(Tag tag)
    {
        try
        {
            await _api.DeleteTagAsync(tag.Id!);
        }
        catch { }
    }

    private async Task Save()
    {
        try
        {
            await _api.SaveTagAsync(Item);
            if (!Items.Contains(Item))
            {
                Items.Add(Item);
            }

            Item = new Tag();
        }
        catch { }
    }
    
    private Task Select(Tag tag)
    {
        try
        {
            Item = tag;
        }
        catch { }

        return Task.CompletedTask;
    }
}