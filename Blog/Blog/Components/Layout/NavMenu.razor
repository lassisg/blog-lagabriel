@implements IDisposable

@inject NavigationManager NavigationManager
<ul class="navbar-nav me-auto mb-2 mb-lg-0">
    <li class="nav-item">
        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
        </NavLink>
    </li>
    <AuthorizeView Roles="Administrator">
    <li class="nav-item dropdown" >
        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            Admin
        </a>
        <ul class="dropdown-menu">
            <li>
                <NavLink class="dropdown-item" href="Admin/Blogposts">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Blog posts
                </NavLink>
            </li>
            <li>
                <NavLink class="dropdown-item" href="Admin/Tags">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Tags
                </NavLink>
            </li>
            <li>
                <NavLink class="dropdown-item" href="Admin/Categories">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Categories
                </NavLink>
            </li>
        </ul>
    </li>
    </AuthorizeView>
</ul>
<ul class="navbar-nav ms-auto mb-2 mb-lg-0">
    <LoginStatus />
    @* <ThemeToggler /> *@
</ul>

@code {
    private string? currentUrl;
    
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
    
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}