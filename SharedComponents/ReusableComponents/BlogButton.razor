<button 
    type="@InternalButtonType" 
    disabled="@Disabled" 
    class="@InternalCssClass" 
    title="@Title" 
    @onclick="OnButtonClick">@ChildContent</button>

@code {
    [CascadingParameter] 
    public EditContext? EditContext { get; set; }
    
    [Parameter] 
    public RenderFragment? ChildContent { get; set; }
    
    private bool? _disabled;
    private string? _disabledHelpText = string.Empty;
    private string formErrors = string.Empty;

    [Parameter]
    public bool Disabled
    {
        get
        {
            if (_disabled != null && (_disabled == null || _disabled.Value))
            {
                return _disabled!.Value;
            }

            if (EditContext == null)
            {
                return false;
            }

            formErrors = "";
            if (!TryGetValidationMessages(out var validationmessages))
            {
                return true;
            }
            
            foreach (var m in validationmessages)
            {
                formErrors += m + (MarkupString)" \r\n";
            }

            return !EditContext.IsModified() || validationmessages.Any();
        }

        set => _disabled = value;
    }
    
    private bool TryGetValidationMessages(out string[] validationMessages)
    {
        validationMessages = [];
        if (EditContext == null)
        {
            return false;
        }

        validationMessages = EditContext.GetValidationMessages().ToArray();
        return !validationMessages.Any();
    }
    
    private string? Title 
        => Disabled && !string.IsNullOrWhiteSpace(DisabledHelpText) ? DisabledHelpText : HelpText;
    
    [Parameter]
    public string? DisabledHelpText { 
        get => _disabledHelpText + (MarkupString)"\r\n" + formErrors;
        set => _disabledHelpText = value;
    }
    
    [Parameter]
    public string? HelpText { get; set; }
    
    [Parameter] 
    public EventCallback OnClick { get; set; }
    
    private string InternalButtonType 
        => OnClick.HasDelegate ? "button" : "submit";
    
    private async Task OnButtonClick(EventArgs args)
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(args);
        }
    }
    
    public enum ButtonType
    {
        Save,
        Cancel,
        Delete,
        Remove,
        Select
    }
    
    [Parameter] 
    public ButtonType Type { get; set; }
    
    private string InternalCssClass
    {
        get
        {
            return Type switch
            {
                ButtonType.Select => "btn btn-primary",
                ButtonType.Save => "btn btn-success",
                ButtonType.Cancel => "btn btn-danger",
                ButtonType.Delete => "btn btn-danger",
                ButtonType.Remove => "btn btn-danger",
                _ => "btn btn-primary"
            };
        }
    }
}