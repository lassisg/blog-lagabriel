@* @page "/admin/blogposts/new" *@
@* @page "/admin/blogposts/{Id}" *@

@* @attribute [Authorize] *@
@rendermode InteractiveServer
@inject IBlogApi _api
@inject NavigationManager _manager
@using Markdig 
@using SharedComponents.ReusableComponents

<div class="row gx-5">
    
    <EditForm Model="Post" OnValidSubmit="SavePost" class="col-4 ms-auto">
        <DataAnnotationsValidator />
        <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
        <BlogNavigationLock @ref="NavigationLock"/>
        
        <InputText @bind-Value="Post.Title"/>
        <ValidationMessage For="() => Post.Title"/>
        
        <InputDate @bind-Value="Post.PublishDate"/>
        <ValidationMessage For="() => Post.PublishDate"/>
        
        <InputSelect @bind-Value="selectedCategory">
            <option value="0" disabled>None selected</option>
            @foreach (var category in Categories)
            {
                <option value="@category.Id">@category.Name </option>
            }
        </InputSelect>
        
        <ul>
            @foreach (var tag in Tags)
            {
                <li>
                    @tag.Name
                    @if (Post.Tags.Any(t => t.Id == tag.Id))
                    {
                        <button type="button" @onclick="@(() => {
                                                            Post.Tags.Remove(Post.Tags.Single(t=>t.Id==tag.Id)); })">Remove</button>
                    }
                    else
                    {
                        <button type="button" @onclick="@(()=> { 
                                                            Post.Tags.Add(tag); })">Add</button>
                    }
                </li>
            }
        </ul>
        <InputTextAreaOnInput @bind-Value="Post.Text" @onkeyup="UpdateHTML"/>
        <ValidationMessage For="() => Post.Text"/>
        
        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>

    <div id="post-preview" class="col-4 me-auto">
        <h1>@Post.Title</h1>
        <span>@Post.PublishDate.ToLongDateString()</span>
        <article class="pt-3">
            @((MarkupString)markDownAsHTML)
        </article>
    </div>

</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category> Categories { get; set; } = [];
    List<Tag> Tags { get; set; } = [];
    string? selectedCategory = null;
    string? markDownAsHTML { get; set; }
    BlogNavigationLock? NavigationLock { get; set; }
    
    MarkdownPipeline pipeline = default!;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        return base.OnInitializedAsync();
    }
    
    public async Task SavePost()
    {
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            var category = Categories.FirstOrDefault(c =>c.Id == selectedCategory);
            if (category != null)
            {
                Post.Category = category;
            }
        }
        await _api.SaveBlogPostAsync(Post);
        NavigationLock?.CurrentEditContext.MarkAsUnmodified();
        _manager.NavigateTo("/admin/blogposts");
    }
    
    protected void UpdateHTML()
    {
        markDownAsHTML = Markdown.ToHtml(Post.Text, pipeline);
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var p = await _api.GetBlogPostAsync(Id);
            if (p != null)
            {
                Post = p;
                if (Post.Category != null)
                {
                    selectedCategory = Post.Category.Id;
                }
                UpdateHTML();
            }
        }
        Categories = (await _api.GetCategoriesAsync());
        Tags = (await _api.GetTagsAsync());
        base.OnParametersSet();
    }
}